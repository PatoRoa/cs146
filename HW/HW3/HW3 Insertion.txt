For my analysis of the insertion sort algorithm, I chose to go with the Python version, since it's the easiest to read. Next to each line I'll attach the times it'll run and the calculated cost.

def insertion_sort(A, n):         -> 1 time = c1
  for i in range(1, n):           -> N+1 times = (c2)(N+1)
    key = A[i]                    -> N times = (c3)(N)
    j = i - l                     -> N times = (c4)(N)
    while j >= 0 and key < A[j]:  -> (N)(N+1) times = (c5)(N)(N+1)
      A[j + 1] = A[j]             -> (N)(N) times = (c6)(N^2)
      j -= 1                      -> (N)(N) times = (c7)(N^2)
    A[j + 1] = key                -> (N)(N) times = (c8)(N^2)
  return A                        -> 1 time = c9

Calculatiing all the costs and their Ns resutlted in a quadratic equation that looks like this:
(c5 + c6 + c7 + c8)(N^2) + (c2 + c3 + c4 + c5)(N) + c1 + c2 + c9

Therefore, the insertion sort algorithm has a growth of at least or similar to O(n^2)

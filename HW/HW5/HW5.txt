Problem 1
1) T(N) = 2T(N-1) + 1
        = 2^k * T(N-k) + 2^k - 1
        = 2^(n+1) - 1
   f(n) = θ(2^n)


2) T(N) = 3T(N-1) + N    -> Decreasing function
        = O(n^1 * 3^(n/1))
        = O(n * 3^n)


3) T(N) = 9T(N/2) + n^2    -> Divide and Conquer function
        = θ(n^(log_2 9 * log^1 n)
        = θ(n^3.169)


4) T(N) = 


5) T(N) = 4T(N/2) + n^2 * log n    -> Divide and Conquer
        = θ(n^(log_2 2 * log^2 n))
        = θ(n^2 * log^3 n)


6) T(N) = 



Problem 2
  yetAnotherFunc(n):             -> T(N)
    if n > 1:                    -> 1
      for(i = 0; i < 10n; i++):  -> N + 1
        doSomething              -> N
      yetAnotherFunc(n/2)        -> T(N/2)
      yetAnotherfunc(n/2)        -> T(N/2)

  T(N) = 2T(N/2) + N + 1 + N + 1
       = 2T(N/2) + 2N + 2

       = θ(n^(log_2 2 * log^2 n))
       = θ(n * log^2 n)




